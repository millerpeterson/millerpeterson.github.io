;; Analyzed by ClojureScript 1.7.170
{:use-macros nil, :excludes #{}, :name genetic-byte-beats.io, :imports nil, :requires {cljs.js cljs.js}, :uses {eval cljs.js, empty-state cljs.js, js-eval cljs.js}, :defs {fill-buffer! {:protocol-inline nil, :meta {:file "/Users/miller/dev/genetic-byte-beats/src/genetic_byte_beats/io.cljs", :line 4, :column 7, :end-line 4, :end-column 19, :arglists (quote ([out-buff buffer-sample-gen]))}, :name genetic-byte-beats.io/fill-buffer!, :variadic false, :file "src/genetic_byte_beats/io.cljs", :end-column 19, :method-params ([out-buff buffer-sample-gen]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 4, :end-line 4, :max-fixed-arity 2, :fn-var true, :arglists (quote ([out-buff buffer-sample-gen]))}, folded-amp {:protocol-inline nil, :meta {:file "/Users/miller/dev/genetic-byte-beats/src/genetic_byte_beats/io.cljs", :line 14, :column 7, :end-line 14, :end-column 17, :arglists (quote ([val]))}, :name genetic-byte-beats.io/folded-amp, :variadic false, :file "src/genetic_byte_beats/io.cljs", :end-column 17, :method-params ([val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 14, :end-line 14, :max-fixed-arity 1, :fn-var true, :arglists (quote ([val]))}, audio-event-processor {:protocol-inline nil, :meta {:file "/Users/miller/dev/genetic-byte-beats/src/genetic_byte_beats/io.cljs", :line 20, :column 7, :end-line 20, :end-column 28, :arglists (quote ([clock-ref sample-gen rate-ratio]))}, :name genetic-byte-beats.io/audio-event-processor, :variadic false, :file "src/genetic_byte_beats/io.cljs", :end-column 28, :method-params ([clock-ref sample-gen rate-ratio]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 20, :end-line 20, :max-fixed-arity 3, :fn-var true, :arglists (quote ([clock-ref sample-gen rate-ratio]))}, context {:protocol-inline nil, :meta {:file "/Users/miller/dev/genetic-byte-beats/src/genetic_byte_beats/io.cljs", :line 33, :column 7, :end-line 33, :end-column 14, :arglists (quote ([])), :doc "Create a web audio context."}, :name genetic-byte-beats.io/context, :variadic false, :file "src/genetic_byte_beats/io.cljs", :end-column 14, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 33, :end-line 33, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :doc "Create a web audio context."}, script-processor-node {:protocol-inline nil, :meta {:file "/Users/miller/dev/genetic-byte-beats/src/genetic_byte_beats/io.cljs", :line 38, :column 7, :end-line 38, :end-column 28, :arglists (quote ([ctx buff-size num-input-chan num-output-chan]))}, :name genetic-byte-beats.io/script-processor-node, :variadic false, :file "src/genetic_byte_beats/io.cljs", :end-column 28, :method-params ([ctx buff-size num-input-chan num-output-chan]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 38, :end-line 38, :max-fixed-arity 4, :fn-var true, :arglists (quote ([ctx buff-size num-input-chan num-output-chan]))}, configure-node-processor {:protocol-inline nil, :meta {:file "/Users/miller/dev/genetic-byte-beats/src/genetic_byte_beats/io.cljs", :line 43, :column 7, :end-line 43, :end-column 31, :arglists (quote ([node processor-fn]))}, :name genetic-byte-beats.io/configure-node-processor, :variadic false, :file "src/genetic_byte_beats/io.cljs", :end-column 31, :method-params ([node processor-fn]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 43, :end-line 43, :max-fixed-arity 2, :fn-var true, :arglists (quote ([node processor-fn]))}, volume-node {:protocol-inline nil, :meta {:file "/Users/miller/dev/genetic-byte-beats/src/genetic_byte_beats/io.cljs", :line 49, :column 7, :end-line 49, :end-column 18, :arglists (quote ([ctx start-gain]))}, :name genetic-byte-beats.io/volume-node, :variadic false, :file "src/genetic_byte_beats/io.cljs", :end-column 18, :method-params ([ctx start-gain]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 49, :end-line 49, :max-fixed-arity 2, :fn-var true, :arglists (quote ([ctx start-gain]))}, sample-gen-func {:protocol-inline nil, :meta {:file "/Users/miller/dev/genetic-byte-beats/src/genetic_byte_beats/io.cljs", :line 56, :column 7, :end-line 56, :end-column 22, :arglists (quote ([gen-ast])), :doc "Return a function for generating sample values from the AST of a gen formula."}, :name genetic-byte-beats.io/sample-gen-func, :variadic false, :file "src/genetic_byte_beats/io.cljs", :end-column 22, :method-params ([gen-ast]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 56, :end-line 56, :max-fixed-arity 1, :fn-var true, :arglists (quote ([gen-ast])), :doc "Return a function for generating sample values from the AST of a gen formula."}}, :require-macros {cljs.js cljs.js}, :cljs.analyzer/constants {:seen #{t fn :expr :source-map :context :eval}, :order [fn t :eval :source-map :context :expr]}, :doc nil}