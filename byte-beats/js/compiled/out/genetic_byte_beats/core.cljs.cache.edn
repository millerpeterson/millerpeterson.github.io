;; Analyzed by ClojureScript 1.7.170
{:use-macros nil, :excludes #{}, :name genetic-byte-beats.core, :imports nil, :requires {gene-ops genetic-byte-beats.gene-ops, reagent.core reagent.core, r reagent.core, genetic-byte-beats.io genetic-byte-beats.io, io genetic-byte-beats.io, evolved genetic-byte-beats.forms.evolved, genetic-byte-beats.forms.evolved genetic-byte-beats.forms.evolved, erlehmann genetic-byte-beats.forms.erlehmann, genetic-byte-beats.gene-ops genetic-byte-beats.gene-ops, genetic-byte-beats.forms.erlehmann genetic-byte-beats.forms.erlehmann, genetic-byte-beats.web-ui genetic-byte-beats.web-ui, web-ui genetic-byte-beats.web-ui}, :uses nil, :defs {start-web-ui {:protocol-inline nil, :meta {:file "/Users/miller/dev/genetic-byte-beats/src/genetic_byte_beats/core.cljs", :line 109, :column 7, :end-line 109, :end-column 19, :arglists (quote ([]))}, :name genetic-byte-beats.core/start-web-ui, :variadic false, :file "src/genetic_byte_beats/core.cljs", :end-column 19, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 109, :end-line 109, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, clock {:name genetic-byte-beats.core/clock, :file "src/genetic_byte_beats/core.cljs", :line 14, :column 1, :end-line 14, :end-column 15, :meta {:file "/Users/miller/dev/genetic-byte-beats/src/genetic_byte_beats/core.cljs", :line 14, :column 10, :end-line 14, :end-column 15}}, play {:protocol-inline nil, :meta {:file "/Users/miller/dev/genetic-byte-beats/src/genetic_byte_beats/core.cljs", :line 28, :column 7, :end-line 28, :end-column 11, :arglists (quote ([gen-func] [gen-func sample-rate])), :doc "Start playback for a sample generating function at a given sample rate.", :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([gen-func] [gen-func sample-rate]), :arglists ([gen-func] [gen-func sample-rate]), :arglists-meta (nil nil)}}, :name genetic-byte-beats.core/play, :variadic false, :file "src/genetic_byte_beats/core.cljs", :end-column 11, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([gen-func] [gen-func sample-rate]), :arglists ([gen-func] [gen-func sample-rate]), :arglists-meta (nil nil)}, :method-params ([gen-func] [gen-func sample-rate]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 28, :end-line 28, :max-fixed-arity 2, :fn-var true, :arglists ([gen-func] [gen-func sample-rate]), :doc "Start playback for a sample generating function at a given sample rate."}, ctx {:name genetic-byte-beats.core/ctx, :file "src/genetic_byte_beats/core.cljs", :line 11, :column 1, :end-line 11, :end-column 13, :meta {:file "/Users/miller/dev/genetic-byte-beats/src/genetic_byte_beats/core.cljs", :line 11, :column 10, :end-line 11, :end-column 13}}, mutate {:protocol-inline nil, :meta {:file "/Users/miller/dev/genetic-byte-beats/src/genetic_byte_beats/core.cljs", :line 60, :column 7, :end-line 60, :end-column 13, :arglists (quote ([method])), :doc "Add a new cell to the line by mutating the last\n  formula then playing it."}, :name genetic-byte-beats.core/mutate, :variadic false, :file "src/genetic_byte_beats/core.cljs", :end-column 13, :method-params ([method]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 60, :end-line 60, :max-fixed-arity 1, :fn-var true, :arglists (quote ([method])), :doc "Add a new cell to the line by mutating the last\n  formula then playing it."}, breed {:protocol-inline nil, :meta {:file "/Users/miller/dev/genetic-byte-beats/src/genetic_byte_beats/core.cljs", :line 70, :column 7, :end-line 70, :end-column 12, :arglists (quote ([mate-forms]))}, :name genetic-byte-beats.core/breed, :variadic false, :file "src/genetic_byte_beats/core.cljs", :end-column 12, :method-params ([mate-forms]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 70, :end-line 70, :max-fixed-arity 1, :fn-var true, :arglists (quote ([mate-forms]))}, reset-clock {:protocol-inline nil, :meta {:file "/Users/miller/dev/genetic-byte-beats/src/genetic_byte_beats/core.cljs", :line 18, :column 7, :end-line 18, :end-column 18, :arglists (quote ([])), :doc "Reset formula clock."}, :name genetic-byte-beats.core/reset-clock, :variadic false, :file "src/genetic_byte_beats/core.cljs", :end-column 18, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 18, :end-line 18, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :doc "Reset formula clock."}, history {:name genetic-byte-beats.core/history, :file "src/genetic_byte_beats/core.cljs", :line 16, :column 1, :end-line 16, :end-column 17, :meta {:file "/Users/miller/dev/genetic-byte-beats/src/genetic_byte_beats/core.cljs", :line 16, :column 10, :end-line 16, :end-column 17}}, volume {:protocol-inline nil, :meta {:file "/Users/miller/dev/genetic-byte-beats/src/genetic_byte_beats/core.cljs", :line 23, :column 7, :end-line 23, :end-column 13, :arglists (quote ([v])), :doc "Adjust volume."}, :name genetic-byte-beats.core/volume, :variadic false, :file "src/genetic_byte_beats/core.cljs", :end-column 13, :method-params ([v]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 23, :end-line 23, :max-fixed-arity 1, :fn-var true, :arglists (quote ([v])), :doc "Adjust volume."}, undo {:protocol-inline nil, :meta {:file "/Users/miller/dev/genetic-byte-beats/src/genetic_byte_beats/core.cljs", :line 79, :column 7, :end-line 79, :end-column 11, :arglists (quote ([]))}, :name genetic-byte-beats.core/undo, :variadic false, :file "src/genetic_byte_beats/core.cljs", :end-column 11, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 79, :end-line 79, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, stop {:protocol-inline nil, :meta {:file "/Users/miller/dev/genetic-byte-beats/src/genetic_byte_beats/core.cljs", :line 40, :column 7, :end-line 40, :end-column 11, :arglists (quote ([])), :doc "Stop playback of the current sample generating function."}, :name genetic-byte-beats.core/stop, :variadic false, :file "src/genetic_byte_beats/core.cljs", :end-column 11, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 40, :end-line 40, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :doc "Stop playback of the current sample generating function."}, processor-node {:name genetic-byte-beats.core/processor-node, :file "src/genetic_byte_beats/core.cljs", :line 13, :column 1, :end-line 13, :end-column 24, :meta {:file "/Users/miller/dev/genetic-byte-beats/src/genetic_byte_beats/core.cljs", :line 13, :column 10, :end-line 13, :end-column 24}}, vol-node {:name genetic-byte-beats.core/vol-node, :file "src/genetic_byte_beats/core.cljs", :line 12, :column 1, :end-line 12, :end-column 18, :meta {:file "/Users/miller/dev/genetic-byte-beats/src/genetic_byte_beats/core.cljs", :line 12, :column 10, :end-line 12, :end-column 18}}, on-js-reload {:protocol-inline nil, :meta {:file "/Users/miller/dev/genetic-byte-beats/src/genetic_byte_beats/core.cljs", :line 118, :column 7, :end-line 118, :end-column 19, :arglists (quote ([]))}, :name genetic-byte-beats.core/on-js-reload, :variadic false, :file "src/genetic_byte_beats/core.cljs", :end-column 19, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 118, :end-line 118, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, new-line {:protocol-inline nil, :meta {:file "/Users/miller/dev/genetic-byte-beats/src/genetic_byte_beats/core.cljs", :line 53, :column 7, :end-line 53, :end-column 15, :arglists (quote ([forms])), :doc "Create a new cell line, starting with a random formula\n  bred from two random parents from a given group of formulas."}, :name genetic-byte-beats.core/new-line, :variadic false, :file "src/genetic_byte_beats/core.cljs", :end-column 15, :method-params ([forms]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 53, :end-line 53, :max-fixed-arity 1, :fn-var true, :arglists (quote ([forms])), :doc "Create a new cell line, starting with a random formula\n  bred from two random parents from a given group of formulas."}, play-and-print {:protocol-inline nil, :meta {:file "/Users/miller/dev/genetic-byte-beats/src/genetic_byte_beats/core.cljs", :line 46, :column 7, :end-line 46, :end-column 21, :arglists (quote ([ast])), :doc "Play an AST and print it."}, :name genetic-byte-beats.core/play-and-print, :variadic false, :file "src/genetic_byte_beats/core.cljs", :end-column 21, :method-params ([ast]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 46, :end-line 46, :max-fixed-arity 1, :fn-var true, :arglists (quote ([ast])), :doc "Play an AST and print it."}}, :require-macros {r reagent.core, reagent.core reagent.core}, :cljs.analyzer/constants {:seen #{:breed :else :simplify :stop :undo :new-line :play-and-print :complexify :mutate}, :order [:complexify :simplify :else :breed :mutate :undo :play-and-print :new-line :stop]}, :doc nil}