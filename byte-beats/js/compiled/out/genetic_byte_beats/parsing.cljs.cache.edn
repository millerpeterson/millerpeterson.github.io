;; Analyzed by ClojureScript 1.7.170
{:use-macros nil, :excludes #{}, :name genetic-byte-beats.parsing, :imports nil, :requires {insta instaparse.core, instaparse.core instaparse.core}, :uses nil, :defs {parser {:name genetic-byte-beats.parsing/parser, :file "src/genetic_byte_beats/parsing.cljs", :line 5, :column 1, :end-line 5, :end-column 12, :meta {:file "/Users/miller/dev/genetic-byte-beats/src/genetic_byte_beats/parsing.cljs", :line 5, :column 6, :end-line 5, :end-column 12}}, ast-from-parsed {:protocol-inline nil, :meta {:file "/Users/miller/dev/genetic-byte-beats/src/genetic_byte_beats/parsing.cljs", :line 34, :column 7, :end-line 34, :end-column 22, :arglists (quote ([parsed-form])), :doc "Return the AST from the parsed form of a byte beat formula."}, :name genetic-byte-beats.parsing/ast-from-parsed, :variadic false, :file "src/genetic_byte_beats/parsing.cljs", :end-column 22, :method-params ([parsed-form]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 34, :end-line 34, :max-fixed-arity 1, :fn-var true, :arglists (quote ([parsed-form])), :doc "Return the AST from the parsed form of a byte beat formula."}, ast-from-string {:protocol-inline nil, :meta {:file "/Users/miller/dev/genetic-byte-beats/src/genetic_byte_beats/parsing.cljs", :line 58, :column 7, :end-line 58, :end-column 22, :arglists (quote ([form-str])), :doc "Return the formula AST from a string representation of a byte\n  beat formula."}, :name genetic-byte-beats.parsing/ast-from-string, :variadic false, :file "src/genetic_byte_beats/parsing.cljs", :end-column 22, :method-params ([form-str]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 58, :end-line 58, :max-fixed-arity 1, :fn-var true, :arglists (quote ([form-str])), :doc "Return the formula AST from a string representation of a byte\n  beat formula."}, op-string-output-map {:name genetic-byte-beats.parsing/op-string-output-map, :file "src/genetic_byte_beats/parsing.cljs", :line 66, :column 1, :end-line 66, :end-column 26, :meta {:file "/Users/miller/dev/genetic-byte-beats/src/genetic_byte_beats/parsing.cljs", :line 66, :column 6, :end-line 66, :end-column 26}}, string-from-ast {:protocol-inline nil, :meta {:file "/Users/miller/dev/genetic-byte-beats/src/genetic_byte_beats/parsing.cljs", :line 81, :column 7, :end-line 81, :end-column 22, :arglists (quote ([ast])), :doc "Return the string representation from the AST of a byte\n  beat formula."}, :name genetic-byte-beats.parsing/string-from-ast, :variadic false, :file "src/genetic_byte_beats/parsing.cljs", :end-column 22, :method-params ([ast]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 81, :end-line 81, :max-fixed-arity 1, :fn-var true, :arglists (quote ([ast])), :doc "Return the string representation from the AST of a byte\n  beat formula."}}, :require-macros nil, :cljs.analyzer/constants {:seen #{:bit-xor bit-shift-right js/Math.tan bit-shift-left :variable :tan :else :shift-left :sub bit-xor :int-cast :mod * :floating :bit-and int :bit-or mod - :div js/Math.sin :hex :integer bit-and :expr / bit-or :sin :mult + :add :shift-right}, :order [:bit-xor :variable :tan :shift-left :sub :int-cast :mod :floating :bit-and :bit-or :div :hex :integer :expr :sin :mult :add :shift-right bit-xor js/Math.tan bit-shift-left - int mod bit-and bit-or / js/Math.sin * + bit-shift-right :else]}, :doc nil}